OVERLOADING METHOD:

It's mechanism in Java that allows us to have same method name with different
parameters. Parameters can be different in number,type and sequence.
Why we should overload a method?
 1)  Method overloading allows us to reuse same method name again and again that we dont'
have to come up with different method names if we are doing the same thing again
and again.
 2)  Allows us to write clean code.

How to overload a method:
  We can overload a method by redefining it with different parameters.


OVERRIDING METHOD:
It's a mechanism in Java that allows a subclass or child class to provide
a specific implementation of a method.
Why we should override a method?

If a child class does not like the implementation of the parent class it
has the flexibility that can override the method(modify the method)
Syntax of overriding?
no, only requirement ==>> there must be a parent child relationship between
two classes.

RULES:
  1) to override a method there must be parent child relationship between two classes
  2) if something cant be inherited we cant override. for example private
  methods and constructions
  3)visibility of the method can be increased. For example is mth has default
  access or protected access we can make it public, but we cant make it private.
  4) private method don't participate in inheritance
  5) if we want to override smth we must recreate that exact method inside the child
  class and can have a different implementation only access modifier can be different.
  It can have more visibility then the method inside the parent class

!!!!!!!!!!If the method is STATIC we re declare in the child class the method not overriding
(exactly the same things but behind the scene the work is different) We simply use the different terminology

***tip: If you want to create the constructor automatically, you right click the code => Generate =>
Constructors => Select both of instance fields you would like to create as a constructor => OK => It will be created automatically.

COMMAND***tip: CTRL + O => Takes us to the window that shows us options that can perform specific tasks for us.
(an options to override the available methods)
